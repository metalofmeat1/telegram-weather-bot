import requests
import asyncio
from os import getenv
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from aiogram.enums import ParseMode
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ReplyKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.types.keyboard_button import KeyboardButton
import kb
import datetime
import logging
import sys
from fsm import WeatherForm

load_dotenv()


root_router = Router()


@root_router.message(Command('weather'))
async def weather_info(message: types.Message, state: FSMContext):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —ñ–∑ —Å–ø–∏—Å–∫—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É:', reply_markup=kb.keyboard)
    await state.set_state(WeatherForm.weather_process)


@root_router.message(CommandStart())
async def start(message: types.Message):
    await message.answer('–í—ñ—Ç–∞—î–º–æ —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ! –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /weather !üåÜ')


@root_router.message(WeatherForm.weather_process)
async def weather_info(message: types.Message, state: FSMContext):

    weather_types = {
        'Clear': '–Ø—Å–Ω–æ‚òÄÔ∏è',
        'Clouds': '–•–º–∞—Ä–Ω–æüå•',
        'Rain': '–î–æ—âüåß',
        'Thunderstorm': '–ì—Ä–æ–∑–∞‚õà',
        'Snow': '–°–Ω—ñ–≥üå®',
        'Mist': '–¢—É–º–∞–Ωüå´'
    }

    try:
        city = message.text
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={getenv('WEATHER_TOKEN')}&units=metric"

        req = requests.get(url)

        data = req.json()

        city = data['name']
        current_weather = data['main']['temp']
        print('2')
        weather_description = data['weather'][0]['main']
        if weather_description in weather_types:
            desc = weather_types[weather_description]
        else:
            desc = '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó'

        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind_speed = data['wind']['speed']

        await message.reply(f'<b>üè° –û–±—Ä–∞–Ω–µ –º—ñ—Å—Ç–æ:</b> {city}\n<b>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {current_weather}¬∞C, {desc}\n'
                            f'<b>üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å:</b> {humidity}%\n<b>üéö –¢–∏—Å–∫:</b> {pressure} –º–º —Ä—Ç. —Å—Ç.\n'
                            f'<b>üå¨ –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É</b>: {wind_speed}–º/—Å\n'
                            f'\n–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üòä', parse_mode=ParseMode.HTML)
        await state.clear()

    except requests.exceptions.RequestException:
        await message.reply('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.')

    except Exception as e:
        await message.reply(f'–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}')


@root_router.message(Command('rating'))
async def rating(message: types.Message):
    await message.reply('–ó–∞–ª–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –æ—Ü—ñ–Ω–∫—É, —è–∫—â–æ –≤–∞–º —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ü–∏–º –±–æ—Ç–æ–º –ø–µ—Ä–µ–π—à–æ–≤—à–∏ –≤ –∫–∞–Ω–∞–ª –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏: https://t.me/rating_weatherbot üòä')


@root_router.message(Command('mail'))
async def mail(message: types.Message):
    await message.reply('–†–æ–∑—Å–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞!')
    while True:
        try:
            time = datetime.datetime.now().strftime('%H:%M')

            if time == '12:00':
                await message.reply('–ù–µ –±–∞–∂–∞—î—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ–≥–æ–¥—É –≤ –∞—à–æ–º—É –±–æ—Ç—ñ?')
                break
        except Exception as ex:
            await message.reply(f'error - {ex}')


@root_router.message(Command('info'))
async def start(message: types.Message):
    await message.answer("–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏ –û. –ö–æ–Ω–¥—Ä–∞—Ç—é–∫–æ–º —Ç–∞ –í. –®–º–µ—Ä—ñ–≥–æ—é.\n–ó–≤'–∑–æ–∫ –∑ –Ω–∞–º–∏:\n"
                         "–û. –ö–æ–Ω–¥—Ä–∞—Ç—é–∫: @lnly_77\n–í. –®–º–µ—Ä—ñ–≥–∞: @iluniki_67")


async def main():
    bot = Bot(getenv('BOT_TOKEN'))

    dp = Dispatcher()

    dp.include_router(root_router)

    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())